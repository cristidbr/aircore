<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link href="css/styles.css#inline" rel="stylesheet">
	<title>ESP-Gzip Manual</title>
</head>
<body style="">


    <h1>ESP-Gzip</h1>
    <h2>Utility Manual</h2>
    
    <p>ESP-Gzip is a utility built in node.js for minifying and compressing webpages in order to reduce their size so they can fit in the limited amount of flash that the ESP8266 has. Designed to simplify ESP8266 development.</p>
    
    <div>
        <h3>Installation</h3>
        Install node.js on your system, unpack ESP-Gzip archive and run <b>install.bat</b>
    
    </div>
    <div>
        <h3>Folder structure</h3>
        <ul>
            <li><b>source</b> - contains editable files of the website, create your webpages in the root of this folder</li>    
            <li><b>minified</b> - folder contains minified webpages, JS and CSS, so you can inspect your minified site and check everything is ok</li>
            <li><b>compressed</b> - gzipped versions of the minified resources are located here</li>
            <li><b>webcontent</b> - embeddable C files for your ESP8266 project</li>
        </ul>
    </div>
    
    <div>
        <h3>Linker features</h3>
        You can develop your CSS and JS in individual files, and have the utility combine the resources in your webpages at runtime.
        For that, you need to add #inline to their paths. 
    <h4>JS Embed example</h4>
<pre>&lt;script src="js/script.js<b>#inline</b>">&lt;/script></pre>
        <h4>CSS Embed example</h4>
<pre>&lt;link href="css/styles.css<b>#inline</b>" rel="stylesheet"></pre>
    </div>
    
    <div>
        <h3>Generating compressed files</h3>
        Simply run <b>build.bat</b> to generate the neccesary C files for your project and you're ready to go.
		<div><b>Pro Tip:</b> You can change the default location of the webcontent folder by editing linker.js so that the C files are generated directly inside your ESP8266 project folder and you can use them right away.</div>    
    </div>
    
    <div>
		<h3>Disadvantages</h3>
        <ul>
            <li>ESP8266 can't modify the pages generated by this script, because they're aldready archived</li>
			<li>The utility doesn't generate the HTTP response, its your job to reply with correct header fields to the client. You must include the <pre>Content-Encoding: gzip</pre> HTTP header, otherwise the browser won't know you're sending compressed files</li>
		</ul>
    </div>
    
    <div>
		<h3>License</h3>
        Don't thank me, everything is completely free. This utility uses great, open source, third party software. If you like it, consider a contribution to its authors:
		<ul>
            <li>7-Zip: <a href="http://www.7-zip.org/">http://www.7-zip.org/</a></li>
            <li>HTML Minifier: <a href="https://www.npmjs.com/package/html-minifier" class="">https://www.npmjs.com/package/html-minifier</a></li>
			<li>Clean CSS: <a href="https://github.com/jakubpawlowicz/clean-css/tree/3.4">https://github.com/jakubpawlowicz/clean-css/tree/3.4</a></li>
			<li>Uglify JS2: <a href="https://www.npmjs.com/package/uglify-js2">https://www.npmjs.com/package/uglify-js2</a></li>
		</ul>
		
		In case you have problems with the utility, or you want to improve it, open an issue on Github or submit a push request. 
    </div>
    
    <div>	
	Cristian Dobre 2016
    <script src="js/script.js#inline"></script>
    </div>
</body>
</html> 
